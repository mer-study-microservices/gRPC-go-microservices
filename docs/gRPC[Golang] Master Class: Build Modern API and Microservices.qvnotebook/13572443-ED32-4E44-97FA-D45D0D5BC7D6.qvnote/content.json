{
  "title": "4 - [Hands-On] gRPC Unary ",
  "cells": [
    {
      "type": "text",
      "data": "<h3>What’s a Unary API?</h3>"
    },
    {
      "type": "text",
      "data": "<ul><li>Unary RPC calls are the basic Request/Response that everyone is familiar with&nbsp;</li><li>The client will send <font color=\"#0096ff\">one</font> message to the server and will receive <font color=\"#0096ff\">one</font> response from the server</li><li>Unary RPC calls will be the most common for your APIs.</li><ul><li>Unary calls are very well suited when your data is small</li><li>Start with Unary when writing APIs and use streaming API if performance is an issue&nbsp;</li></ul></ul>"
    },
    {
      "type": "text",
      "data": "<img src=\"quiver-image-url/5797E5EAF4A1FF5E86301498F9FD7BA2.png\" alt=\"Screen Shot 2019-02-10 at 23.58.54.png\" width=\"299\" height=\"169\">"
    },
    {
      "type": "text",
      "data": "<ul><li>In gRPC Unary Calls are defined using Protocol Buffers&nbsp;</li><li>For each RPC call we have to define a “Request” message and a “Response” message.&nbsp;</li></ul>"
    },
    {
      "type": "text",
      "data": "<h3>Greet API Definition</h3>"
    },
    {
      "type": "text",
      "data": "<ul><li><u>Hands On</u>: Let’s define a Unary “Greet” API.</li><li>Our message is <font color=\"#0096ff\">Greeting</font> and contains <font color=\"#0096ff\">first_name</font> &amp; <font color=\"#0096ff\">last_name</font> string field&nbsp;</li><li>It will take a <font color=\"#0096ff\">GreetRequest</font> that contains a <font color=\"#0096ff\">Greeting</font></li><li>It will return a <font color=\"#0096ff\">GreetResponse</font> that contains a <font color=\"#0096ff\">result</font> string&nbsp;</li></ul>"
    },
    {
      "type": "text",
      "data": "/src/greet/greetpb/greet.proto"
    },
    {
      "type": "code",
      "language": "golang",
      "data": "syntax = \"proto3\";\n\npackage greet;\noption go_package = \"greetpb\";\n\nmessage Greeting {\n    string first_name = 1;\n    string last_name = 2;\n}\n\nmessage GreetRequest {\n    Greeting greeting = 1;\n}\n\nmessage GreetResponse {\n    string result = 1;\n}\n\nservice GreetService {\n    // Unary \n    rpc Greet(GreetRequest) returns (GreetResponse) {};\n}"
    },
    {
      "type": "text",
      "data": "<h3>Unary API Server Implementation&nbsp;</h3>"
    },
    {
      "type": "text",
      "data": "<ul><li>Hands-on:</li><li>We’ll implement a Unary Greet RPC</li><li>We’ll hook our new GreetService to our Server&nbsp;</li><li>We’ll start our Server</li></ul>"
    },
    {
      "type": "text",
      "data": "/src/greet/greet_server/server.go"
    },
    {
      "type": "code",
      "language": "golang",
      "data": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\n\t\"github.com/gRPC-go-microservices/src/greet/greetpb\"\n\t\"google.golang.org/grpc\"\n)\n\ntype server struct{}\n\nfunc (*server) Greet(ctx context.Context, req *greetpb.GreetRequest) (*greetpb.GreetResponse, error) {\n\t// extract information from request\n\tfirstName := req.GetGreeting().GetFirstName()\n\t// form a response\n\tresult := \"Hello \" + firstName\n\tres := &greetpb.GreetResponse{\n\t\tResult: result,\n\t}\n\treturn res, nil\n}\n\nfunc main() {\n\tfmt.Println(\"Hello, I'm a server\")\n\n\t// listener\n\t// 50051 is the default port number for gRPC\n\tlis, err := net.Listen(\"tcp\", \"0.0.0.0:50051\")\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to listen: %v\", err)\n\t}\n\n\t// create grpc server\n\ts := grpc.NewServer()\n\tgreetpb.RegisterGreetServiceServer(s, &server{})\n\n\t// bind the server to the port\n\tif err := s.Serve(lis); err != nil {\n\t\tlog.Fatalf(\"failed to serve: %v\", err)\n\t}\n}"
    },
    {
      "type": "text",
      "data": "<h3>Unary API Client Implementation&nbsp;</h3>"
    },
    {
      "type": "text",
      "data": "<ul><li>Hands-on:</li><li>We’ll implement a client call for our Unary RPC</li><li>We’ll test it against our server that is running!</li></ul>"
    },
    {
      "type": "text",
      "data": "/src/greet/greet_client/client.go"
    },
    {
      "type": "code",
      "language": "golang",
      "data": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\n\t\"github.com/gRPC-go-microservices/src/greet/greetpb\"\n\t\"google.golang.org/grpc\"\n)\n\nfunc main() {\n\tfmt.Println(\"Hello I'm a client\")\n\n\t// by default gRPC has SSL, for now, without this\n\tconn, err := grpc.Dial(\"localhost:50051\", grpc.WithInsecure())\n\tif err != nil {\n\t\tlog.Fatalf(\"could not connect: %v\", err)\n\t}\n\n\t// defer means defer this statement at the very end of this function\n\tdefer conn.Close()\n\n\t// create a new client\n\tc := greetpb.NewGreetServiceClient(conn)\n\tdoUnary(c)\n}\n\nfunc doUnary(c greetpb.GreetServiceClient) {\n\treq := &greetpb.GreetRequest{\n\t\tGreeting: &greetpb.Greeting{\n\t\t\tFirstName: \"Jieqiong\",\n\t\t\tLastName:  \"Yu\",\n\t\t},\n\t}\n\tres, err := c.Greet(context.Background(), req)\n\n\tif err != nil {\n\t\tlog.Fatalf(\"error while calling Greet RPC: %v\", err)\n\t}\n\n\tlog.Printf(\"Response from Greet: %v\", res.Result)\n}"
    },
    {
      "type": "text",
      "data": "<h3>[Solution] Sum API</h3>"
    },
    {
      "type": "text",
      "data": "/src/calculator"
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": "<br>"
    }
  ]
}